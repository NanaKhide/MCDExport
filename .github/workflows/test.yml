name: Testing MCDExport

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  release:
    types: [created]

# Add a condition to check if it's a pre-release
jobs:
    build:
        # Only run if the release is a pre-release
        if: github.event.release.prerelease == true
        runs-on: windows-latest
        permissions:
            contents: write

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install .NET
              uses: actions/setup-dotnet@v1
              with:
                  dotnet-version: 9.0.x

            - name: Download Dalamud
              run: |
                  Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -OutFile latest.zip
                  Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev"

            - name: Restore Dependencies
              run: dotnet restore MCDExport.sln

            - name: Build MCDExport
              run: |
                  $version = '${{ github.ref_name }}'.TrimStart('v')
                  dotnet build MCDExport.sln --no-restore /p:Configuration=Release /p:Version=$version

            - name: Zip Release
              uses: TheDoctor0/zip-release@0.6.0
              with:
                  filename: '../../../../MCDExport.zip'
                  directory: './MCDExport/bin/x64/Release/'
                  exclusions: 'MCDExport MCDExport/*'

            - name: Update Release
              uses: ncipollo/release-action@v1
              with:
                tag: ${{ github.ref_name }}
                allowUpdates: true
                artifacts: "./MCDExport.zip"
                generateReleaseNotes: true
                updateOnlyUnreleased: false

            - name: Update repo.json
              run: |
                  git config --global user.name "Actions User"
                  git config --global user.email "actions@github.com"
                  git fetch origin master && git checkout master
                  $ver = '${{ github.ref_name }}'.TrimStart('v')

                  ./.github/tools/update-repo.ps1 testing $ver

                  git add repo.json
                  git commit -m "[CI] Updating versions for ${{ github.ref_name }}" || true
                  git push origin master || true
